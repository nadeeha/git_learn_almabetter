import pandas as pd
import plotly.graph_objects as go
from plotly.subplots import make_subplots

# ETF and Naive sample data
dfs_dict = {
    'ETF A': pd.DataFrame({
        'ISIN': ['A', 'B', 'C', 'D'],
        'GICS_Sector_Name': ['Tech', 'Tech', 'Health', 'Health'],
        'etf_weight': [0.10, 0.05, 0.15, 0.05]
    }),
    'ETF B': pd.DataFrame({
        'ISIN': ['A', 'B', 'C', 'D'],
        'GICS_Sector_Name': ['Tech', 'Tech', 'Health', 'Health'],
        'etf_weight': [0.08, 0.06, 0.12, 0.09]
    })
}

dfs_naive = {
    'Naive A': pd.DataFrame({
        'ISIN': ['A', 'B', 'C', 'D'],
        'GICS_Sector_Name': ['Tech', 'Tech', 'Health', 'Health'],
        'weight_market_cap': [0.07, 0.05, 0.10, 0.06]
    }),
    'Naive B': pd.DataFrame({
        'ISIN': ['A', 'B', 'C', 'D'],
        'GICS_Sector_Name': ['Tech', 'Tech', 'Health', 'Health'],
        'weight_market_cap': [0.06, 0.07, 0.08, 0.07]
    })
}

# ACWI IMI universe with market cap
df_acwi_imi = pd.DataFrame({
    'isin_blg': ['A', 'B', 'C', 'D'],
    'GICS_Sector_Name': ['Tech', 'Tech', 'Health', 'Health'],
    'Market_Cap_USD': [100, 200, 300, 100]
})
df_acwi_imi['mkt_cap_weight_viz'] = df_acwi_imi['Market_Cap_USD'] / df_acwi_imi['Market_Cap_USD'].sum()

def compute_summary(dfs, df_universe, weight_col):
    results = []
    for name, df in dfs.items():
        df = pd.merge(
            df,
            df_universe[['isin_blg', 'mkt_cap_weight_viz']],
            left_on='ISIN',
            right_on='isin_blg',
            how='left'
        )
        df['Active_Multiple'] = df[weight_col] / df['mkt_cap_weight_viz']
        grouped = df.groupby('GICS_Sector_Name')['Active_Multiple'].agg(Median='median', Max='max').reset_index()
        grouped['Portfolio'] = name
        results.append(grouped)
    melted = pd.concat(results, ignore_index=True).melt(
        id_vars=['GICS_Sector_Name', 'Portfolio'],
        value_vars=['Median', 'Max'],
        var_name='Metric',
        value_name='Active_Multiple'
    )
    return melted

# Compute summaries
df_melt_main = compute_summary(dfs_dict, df_acwi_imi, 'etf_weight')
df_melt_naive = compute_summary(dfs_naive, df_acwi_imi, 'weight_market_cap')

# Pivot tables
pivot_main_median = df_melt_main[df_melt_main['Metric'] == 'Median'].pivot(index='GICS_Sector_Name', columns='Portfolio', values='Active_Multiple').fillna(0)
pivot_main_max = df_melt_main[df_melt_main['Metric'] == 'Max'].pivot(index='GICS_Sector_Name', columns='Portfolio', values='Active_Multiple').fillna(0)
pivot_naive_median = df_melt_naive[df_melt_naive['Metric'] == 'Median'].pivot(index='GICS_Sector_Name', columns='Portfolio', values='Active_Multiple').fillna(0)
pivot_naive_max = df_melt_naive[df_melt_naive['Metric'] == 'Max'].pivot(index='GICS_Sector_Name', columns='Portfolio', values='Active_Multiple').fillna(0)

# Create subplots
fig = make_subplots(rows=1, cols=2, subplot_titles=["ETF Portfolios", "Naive Portfolios"])

fig.add_trace(go.Heatmap(
    z=pivot_main_median.values,
    x=pivot_main_median.columns,
    y=pivot_main_median.index,
    colorscale='Blues',
    visible=True,
    colorbar=dict(title='Active Multiple'),
    name='ETF Median'
), row=1, col=1)

fig.add_trace(go.Heatmap(
    z=pivot_main_max.values,
    x=pivot_main_max.columns,
    y=pivot_main_max.index,
    colorscale='Blues',
    visible=False,
    showscale=False,
    name='ETF Max'
), row=1, col=1)

fig.add_trace(go.Heatmap(
    z=pivot_naive_median.values,
    x=pivot_naive_median.columns,
    y=pivot_naive_median.index,
    colorscale='Greens',
    visible=True,
    showscale=False,
    name='Naive Median'
), row=1, col=2)

fig.add_trace(go.Heatmap(
    z=pivot_naive_max.values,
    x=pivot_naive_max.columns,
    y=pivot_naive_max.index,
    colorscale='Greens',
    visible=False,
    showscale=False,
    name='Naive Max'
), row=1, col=2)

# Dropdown
fig.update_layout(
    title="Median vs Max Active Multiples by Sector",
    width=1000,
    height=600,
    updatemenus=[{
        'buttons': [
            {
                'label': 'Median',
                'method': 'update',
                'args': [{'visible': [True, False, True, False]},
                         {'title': 'Median Active Multiples by Sector'}]
            },
            {
                'label': 'Max',
                'method': 'update',
                'args': [{'visible': [False, True, False, True]},
                         {'title': 'Max Active Multiples by Sector'}]
            }
        ],
        'direction': 'down',
        'x': 0.0,
        'xanchor': 'left',
        'y': 1.15,
        'yanchor': 'top',
        'showactive': True
    }]
)

# Save HTML
fig.write_html("heatmap_median_max_dual.html")
print("âœ… Saved to heatmap_median_max_dual.html")
